
## Source files
# physics/
set(_atm_core_physics_srcs
        ccpp_kinds.F
        mpas_atmphys_camrad_init.F
        mpas_atmphys_constants.F
        mpas_atmphys_control.F
        mpas_atmphys_date_time.F
        mpas_atmphys_driver_cloudiness.F
        mpas_atmphys_driver_microphysics.F
        mpas_atmphys_driver_oml.F
        mpas_atmphys_finalize.F
        mpas_atmphys_functions.F
        mpas_atmphys_init_microphysics.F
        #        mpas_atmphys_initialize_real.F
        mpas_atmphys_interface.F
        mpas_atmphys_landuse.F
        mpas_atmphys_lsm_noahinit.F
        mpas_atmphys_manager.F
        mpas_atmphys_o3climatology.F
        mpas_atmphys_rrtmg_lwinit.F
        mpas_atmphys_rrtmg_swinit.F
        mpas_atmphys_update.F
        mpas_atmphys_update_surface.F
        mpas_atmphys_utilities.F
        mpas_atmphys_driver.F
        mpas_atmphys_driver_convection.F
        mpas_atmphys_driver_gwdo.F
        mpas_atmphys_driver_lsm.F
        mpas_atmphys_driver_pbl.F
        mpas_atmphys_driver_radiation_lw.F
        mpas_atmphys_driver_radiation_sw.F
        mpas_atmphys_driver_seaice.F
        mpas_atmphys_driver_sfclayer.F
        mpas_atmphys_init.F
        mpas_atmphys_lsm_shared.F
        mpas_atmphys_packages.F
        mpas_atmphys_todynamics.F
        mpas_atmphys_vars.F
)
list(TRANSFORM _atm_core_physics_srcs PREPEND physics/)

## Unused
# physics/physics_wrf/
set(_atm_core_physics_wrf_srcs
        libmassv.F
        module_bep_bem_helper.F
        module_bl_gwdo.F
        module_bl_ysu.F
        module_cam_error_function.F
        module_cam_shr_kind_mod.F
        module_cam_support.F
        module_cu_gf.mpas.F
        module_mp_kessler.F
        module_mp_radar.F
        module_mp_thompson.F
        module_mp_thompson_cldfra3.F
        module_mp_wsm6.F
        module_ra_cam_support.F
        module_ra_rrtmg_lw.F
        module_ra_rrtmg_sw.F
        module_ra_rrtmg_vinterp.F
        module_sf_bem.F
        module_sf_bep.F
        module_sf_bep_bem.F
        module_sf_noah_seaice.F
        module_sf_noah_seaice_drv.F
        module_sf_noahdrv.F
        module_sf_noahlsm.F
        module_sf_noahlsm_glacial_only.F
        module_sf_oml.F
        module_sf_sfcdiags.F
        module_sf_sfclay.F
        module_sf_sfclayrev.F
        module_sf_urban.F
        bl_mynn_post.F
        bl_mynn_pre.F
        module_bl_mynn.F
        module_cu_kfeta.F
        module_cu_ntiedtke.F
        module_cu_tiedtke.F
        module_ra_cam.F
        module_sf_mynn.F
        sf_mynn_pre.F
)

list(TRANSFORM _atm_core_physics_wrf_srcs PREPEND physics/physics_wrf/)

set(_atm_core_physics_mmm_srcs
        bl_gwdo.F
        bl_ysu.F
        cu_ntiedtke.F
        module_libmassv.F
        mp_wsm6.F
        mp_wsm6_effectRad.F
        bl_mynn.F
        bl_mynn_subroutines.F
        mp_radar.F
        mynn_shared.F
        sf_mynn.F
        sf_sfclayrev.F
)

list(TRANSFORM _atm_core_physics_mmm_srcs PREPEND physics/physics_mmm/)

# diagnostics/
set(_atm_core_diagnostics_srcs
        mpas_atm_diagnostic_template.F
        mpas_atm_diagnostics_manager.F
        mpas_atm_diagnostics_utils.F
        mpas_cloud_diagnostics.F
        mpas_convective_diagnostics.F
        mpas_isobaric_diagnostics.F
        mpas_pv_diagnostics.F
        mpas_soundings.F
)

list(TRANSFORM _atm_core_diagnostics_srcs PREPEND diagnostics/)

# dynamics/
set(_atm_core_dynamics_srcs
        mpas_atm_boundaries.F
        mpas_atm_iau.F
        mpas_atm_time_integration.F)
list(TRANSFORM _atm_core_dynamics_srcs PREPEND dynamics/)

# utils/
set(_atm_core_utils_srcs
        atmphys_build_tables_thompson.F
        build_tables.F)
list(TRANSFORM _atm_core_utils_srcs PREPEND utils/)

# core_atosphere
set(_atm_core_srcs
        mpas_atm_dimensions.F
        mpas_atm_threading.F
        mpas_atm_core.F
        mpas_atm_core_interface.F
        mpas_atm_halos.F
)

## Generated includes
set(atm_core_inc
        block_dimension_routines.inc
        core_variables.inc
        define_packages.inc
        domain_variables.inc
        namelist_call.inc
        namelist_defines.inc
        setup_immutable_streams.inc
        structs_and_variables.inc)


add_library(core_atmosphere ${_atm_core_srcs}
        ${_atm_core_physics_srcs}
        ${_atm_core_physics_mmm_srcs}
        ${_atm_core_physics_wrf_srcs}
        ${_atm_core_diagnostics_srcs}
        ${_atm_core_dynamics_srcs})

if (${DO_PHYSICS})
    target_compile_definitions(core_atmosphere PRIVATE DO_PHYSICS)
endif ()
if (MPAS_DOUBLE_PRECISION)
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -fdefault-double-8")
else ()
    target_compile_definitions(core_atmosphere PRIVATE SINGLE_PRECISION)
endif ()
if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    target_compile_definitions(core_atmosphere PRIVATE MPAS_DEBUG)
endif ()
if (${PIO_FOUND})
    FILE(STRINGS ${PIO_PREFIX}/lib/libpio.settings PIO_SETTINGS)
    foreach (setting ${PIO_SETTINGS})
        string(FIND ${setting} "PIO Version" found)
        if (${found} GREATER -1)
            string(FIND ${setting} "2." pos)
            if (${pos} GREATER -1)
                set(PIO_VERSION 2)
            else ()
                set(PIO_VERSION 1)
            endif ()
            break()
        endif ()
    endforeach ()
    if (${PIO_VERSION} EQUAL 1)
        target_compile_definitions(core_atmosphere PRIVATE USE_PIO1)
    else ()
        target_compile_definitions(core_atmosphere PRIVATE USE_PIO2)
    endif ()
    target_compile_definitions(core_atmosphere PRIVATE MPAS_PIO_SUPPORT)
endif ()
target_compile_definitions(core_atmosphere PRIVATE mpas=1)
target_compile_definitions(framework PRIVATE MPAS_NATIVE_TIMERS)
mpas_core_target(CORE atmosphere TARGET core_atmosphere INCLUDES ${atm_core_inc})

#Get physics_wrf tables from MPAS-Data
include(FetchContent)
if (${PROJECT_VERSION} VERSION_GREATER_EQUAL 7.0)
    set(MPAS_DATA_GIT_TAG v${PROJECT_VERSION})
else ()
    set(MPAS_DATA_GIT_TAG master)
endif ()

FetchContent_Declare(mpas_data
        GIT_REPOSITORY https://github.com/MPAS-Dev/MPAS-Data.git
        GIT_TAG ${MPAS_DATA_GIT_TAG}
        GIT_PROGRESS True
        GIT_SHALLOW True)
FetchContent_Populate(mpas_data)
message(STATUS "MPAS-Data source dir: ${mpas_data_SOURCE_DIR}")
set(_physics_wrf_datadir ${mpas_data_SOURCE_DIR}/atmosphere/physics_wrf/files)
file(GLOB _physics_wrf_data RELATIVE ${_physics_wrf_datadir} "${_physics_wrf_datadir}/*")
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/${PROJECT_NAME}/core_atmosphere)
foreach (_datafile IN LISTS _physics_wrf_data)
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${_physics_wrf_datadir}/${_datafile}
            ${CMAKE_BINARY_DIR}/${PROJECT_NAME}/core_atmosphere/${_datafile})
endforeach ()
install(DIRECTORY ${_physics_wrf_datadir}/ DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}/core_atmosphere)

add_executable(mpas_atmosphere_build_tables ${_atm_core_utils_srcs})
target_link_libraries(mpas_atmosphere_build_tables PUBLIC core_atmosphere)
mpas_fortran_target(mpas_atmosphere_build_tables)
install(TARGETS mpas_atmosphere_build_tables EXPORT ${PROJECT_NAME}ExportsCore
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
