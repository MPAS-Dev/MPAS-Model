	double qv(Time, nCells, nVertLevels) ;
                qv:long_name = "Water vapor mixing ratio" ;
                qv:units = "kg kg^{-1}" ;
        double qc(Time, nCells, nVertLevels) ;
                qc:long_name = "Cloud water mixing ratio" ;
                qc:units = "kg kg^{-1}" ;
        double qr(Time, nCells, nVertLevels) ;
                qr:long_name = "Rain water mixing ratio" ;
                qr:units = "kg kg^{-1}" ;
        char initial_time(StrLen) ;
                initial_time:units = "YYYY-MM-DD_hh:mm:ss" ;
                initial_time:long_name = "Model initialization time" ;
        char xtime(Time, StrLen) ;
                xtime:units = "YYYY-MM-DD_hh:mm:ss" ;
                xtime:long_name = "Model valid time" ;
        double latCell(nCells) ;
                latCell:units = "rad" ;
                latCell:long_name = "Latitude of cells" ;
        double lonCell(nCells) ;
                lonCell:units = "rad" ;
                lonCell:long_name = "Longitude of cells" ;
        double xCell(nCells) ;
                xCell:units = "m" ;
                xCell:long_name = "Cartesian x-coordinate of cells" ;
        double yCell(nCells) ;
                yCell:units = "m" ;
                yCell:long_name = "Cartesian y-coordinate of cells" ;
        double zCell(nCells) ;
                zCell:units = "m" ;
                zCell:long_name = "Cartesian z-coordinate of cells" ;
        int indexToCellID(nCells) ;
                indexToCellID:units = "-" ;
                indexToCellID:long_name = "Mapping from local array index to global cell ID" ;
        double latEdge(nEdges) ;
                latEdge:units = "rad" ;
                latEdge:long_name = "Latitude of edges" ;
        double lonEdge(nEdges) ;
                lonEdge:units = "rad" ;
                lonEdge:long_name = "Longitude of edges" ;
        double xEdge(nEdges) ;
                xEdge:units = "m" ;
                xEdge:long_name = "Cartesian x-coordinate of edges" ;
        double yEdge(nEdges) ;
                yEdge:units = "m" ;
                yEdge:long_name = "Cartesian y-coordinate of edges" ;
        double zEdge(nEdges) ;
                zEdge:units = "m" ;
                zEdge:long_name = "Cartesian z-coordinate of edges" ;
        int indexToEdgeID(nEdges) ;
                indexToEdgeID:units = "-" ;
                indexToEdgeID:long_name = "Mapping from local array index to global edge ID" ;
        double latVertex(nVertices) ;
                latVertex:units = "rad" ;
                latVertex:long_name = "Latitude of vertices" ;
        double lonVertex(nVertices) ;
                lonVertex:units = "rad" ;
                lonVertex:long_name = "Longitude of vertices" ;
        double xVertex(nVertices) ;
                xVertex:units = "m" ;
                xVertex:long_name = "Cartesian x-coordinate of vertices" ;
        double yVertex(nVertices) ;
                yVertex:units = "m" ;
                yVertex:long_name = "Cartesian y-coordinate of vertices" ;
        double zVertex(nVertices) ;
                zVertex:units = "m" ;
                zVertex:long_name = "Cartesian z-coordinate of vertices" ;
        int indexToVertexID(nVertices) ;
                indexToVertexID:units = "-" ;
                indexToVertexID:long_name = "Mapping from local array index to global vertex ID" ;
        int cellsOnEdge(nEdges, TWO) ;
                cellsOnEdge:units = "-" ;
                cellsOnEdge:long_name = "IDs of cells divided by an edge" ;
        int nEdgesOnCell(nCells) ;
                nEdgesOnCell:units = "-" ;
                nEdgesOnCell:long_name = "Number of edges forming the boundary of a cell" ;
        int nEdgesOnEdge(nEdges) ;
                nEdgesOnEdge:units = "-" ;
                nEdgesOnEdge:long_name = "Number of edges involved in reconstruction of tangential velocity for an edge" ;
        int edgesOnCell(nCells, maxEdges) ;
                edgesOnCell:units = "-" ;
                edgesOnCell:long_name = "IDs of edges forming the boundary of a cell" ;
        int edgesOnEdge(nEdges, maxEdges2) ;
                edgesOnEdge:units = "-" ;
                edgesOnEdge:long_name = "IDs of edges involved in reconstruction of tangential velocity for an edge" ;
        double weightsOnEdge(nEdges, maxEdges2) ;
                weightsOnEdge:units = "-" ;
                weightsOnEdge:long_name = "Weights used in reconstruction of tangential velocity for an edge" ;
        double dvEdge(nEdges) ;
                dvEdge:units = "-" ;
                dvEdge:long_name = "Spherical distance between vertex endpoints of an edge" ;
        double dcEdge(nEdges) ;
                dcEdge:units = "m" ;
                dcEdge:long_name = "Spherical distance between cells separated by an edge" ;
        double angleEdge(nEdges) ;
                angleEdge:units = "rad" ;
                angleEdge:long_name = "Angle between local north and the positive tangential direction of an edge" ;
        double areaCell(nCells) ;
                areaCell:units = "m^2" ;
                areaCell:long_name = "Spherical area of a Voronoi cell" ;
        double areaTriangle(nVertices) ;
                areaTriangle:units = "m^2" ;
                areaTriangle:long_name = "Spherical area of a Delaunay triangle" ;
        int cellsOnCell(nCells, maxEdges) ;
                cellsOnCell:units = "-" ;
                cellsOnCell:long_name = "IDs of cells neighboring a cell" ;
        int verticesOnCell(nCells, maxEdges) ;
                verticesOnCell:units = "-" ;
                verticesOnCell:long_name = "IDs of vertices (corner points) of a cell" ;
        int verticesOnEdge(nEdges, TWO) ;
                verticesOnEdge:units = "-" ;
                verticesOnEdge:long_name = "IDs of the two vertex endpoints of an edge" ;
        int edgesOnVertex(nVertices, vertexDegree) ;
                edgesOnVertex:units = "-" ;
                edgesOnVertex:long_name = "IDs of the edges that meet at a vertex" ;
        int cellsOnVertex(nVertices, vertexDegree) ;
                cellsOnVertex:units = "-" ;
                cellsOnVertex:long_name = "IDs of the cells that meet at a vertex" ;
        double kiteAreasOnVertex(nVertices, vertexDegree) ;
                kiteAreasOnVertex:units = "m^2" ;
                kiteAreasOnVertex:long_name = "Intersection areas between primal (Voronoi) and dual (triangular) mesh cells" ;
        double meshDensity(nCells) ;
                meshDensity:units = "unitless" ;
                meshDensity:long_name = "Mesh density function (used when generating the mesh) evaluated at a cell" ;
        int bdyMaskCell(nCells) ;
                bdyMaskCell:units = "-" ;
                bdyMaskCell:long_name = "Indicator of whether a cell is an interior cell, a relaxation-zone cell, or a specified-zone cell" ;
        int bdyMaskEdge(nEdges) ;
                bdyMaskEdge:units = "-" ;
                bdyMaskEdge:long_name = "Indicator of whether an edge is an interior edge, a relaxation-zone edge, or a specified-zone edge" ;
        int bdyMaskVertex(nVertices) ;
                bdyMaskVertex:units = "-" ;
                bdyMaskVertex:long_name = "Indicator of whether an vertex is an interior vertex, a relaxation-zone vertex, or a specified-zone vertex" ;
        double edgeNormalVectors(nEdges, R3) ;
                edgeNormalVectors:units = "unitless" ;
                edgeNormalVectors:long_name = "Cartesian components of the vector normal to an edge and tangential to the surface of the sphere" ;
        double localVerticalUnitVectors(nCells, R3) ;
                localVerticalUnitVectors:units = "unitless" ;
                localVerticalUnitVectors:long_name = "Cartesian components of the vector pointing in the local vertical direction for a cell" ;
        double cellTangentPlane(nCells, TWO, R3) ;
                cellTangentPlane:units = "unitless" ;
                cellTangentPlane:long_name = "Components of a pair of vectors defining the tangent plane at a cell" ;
        double fEdge(nEdges) ;
                fEdge:units = "unitless" ;
                fEdge:long_name = "Coriolis parameter at an edge" ;
        double fVertex(nVertices) ;
                fVertex:units = "unitless" ;
                fVertex:long_name = "Coriolis parameter at a vertex" ;
        double ter(nCells) ;
                ter:units = "m" ;
                ter:long_name = "terrain height" ;
        int landmask(nCells) ;
                landmask:units = "unitless" ;
                landmask:long_name = "land-ocean mask (1=land ; 0=ocean)" ;
        char mminlu(StrLen) ;
                mminlu:units = "unitless" ;
                mminlu:long_name = "land use classification" ;
        int isice_lu ;
                isice_lu:units = "unitless" ;
                isice_lu:long_name = "Index category for snow/ice" ;
        int iswater_lu ;
                iswater_lu:units = "unitless" ;
                iswater_lu:long_name = "Index category for water" ;
        int ivgtyp(nCells) ;
                ivgtyp:units = "unitless" ;
                ivgtyp:long_name = "dominant vegetation category" ;
        int isltyp(nCells) ;
                isltyp:units = "unitless" ;
                isltyp:long_name = "dominate soil category" ;
        double snoalb(nCells) ;
                snoalb:units = "unitless" ;
                snoalb:long_name = "annual maximum snow albedo" ;
        double soiltemp(nCells) ;
                soiltemp:units = "K" ;
                soiltemp:long_name = "annual mean deep soil temperature" ;
        double greenfrac(nCells, nMonths) ;
                greenfrac:units = "unitless" ;
                greenfrac:long_name = "monthly-mean climatological greeness fraction" ;
        double shdmin(nCells) ;
                shdmin:units = "unitless" ;
                shdmin:long_name = "minimum fractional coverage of annual green vegetation fraction" ;
        double shdmax(nCells) ;
                shdmax:units = "unitless" ;
                shdmax:long_name = "maximum fractional coverage of annual green vegetation fraction" ;
        double albedo12m(nCells, nMonths) ;
                albedo12m:units = "unitless" ;
                albedo12m:long_name = "monthly-mean climatological surface albedo" ;
        double var2d(nCells) ;
                var2d:units = "m" ;
                var2d:long_name = "standard deviation of subgrid-scale orography" ;
        double con(nCells) ;
                con:units = "unitless" ;
                con:long_name = "orographic convexity" ;
        double oa1(nCells) ;
                oa1:units = "unitless" ;
                oa1:long_name = "asymmetry of subgrid-scale orography for westerly flow" ;
        double oa2(nCells) ;
                oa2:units = "unitless" ;
                oa2:long_name = "asymmetry of subgrid-scale orography for southerly flow" ;
        double oa3(nCells) ;
                oa3:units = "unitless" ;
                oa3:long_name = "asymmetry of subgrid-scale orography for south-westerly flow" ;
        double oa4(nCells) ;
                oa4:units = "unitless" ;
                oa4:long_name = "asymmetry of subgrid-scale orography for north-westerly flow" ;
        double ol1(nCells) ;
                ol1:units = "unitless" ;
                ol1:long_name = "effective orographic length for westerly flow" ;
        double ol2(nCells) ;
                ol2:units = "unitless" ;
                ol2:long_name = "effective orographic length for southerly flow" ;
        double ol3(nCells) ;
                ol3:units = "unitles" ;
                ol3:long_name = "effective orographic length for south-westerly flow" ;
        double ol4(nCells) ;
                ol4:units = "unitless" ;
                ol4:long_name = "effective orographic length for north-westerly flow" ;
        double deriv_two(nEdges, TWO, FIFTEEN) ;
                deriv_two:units = "unitless" ;
                deriv_two:long_name = "weights for cell-centered second derivative, normal to edge, for transport scheme" ;
        int advCells(nCells, TWENTYONE) ;
                advCells:units = "-" ;
                advCells:long_name = "cells used in least squares fit of polynomial for advection" ;
        double defc_a(nCells, maxEdges) ;
                defc_a:units = "unitless" ;
                defc_a:long_name = "Coefficients for computing the off-diagonal components of the horizontal deformation" ;
        double defc_b(nCells, maxEdges) ;
                defc_b:units = "unitless" ;
                defc_b:long_name = "Coefficients for computing the diagonal components of the horizontal deformation" ;
        double coeffs_reconstruct(nCells, maxEdges, R3) ;
                coeffs_reconstruct:units = "unitless" ;
                coeffs_reconstruct:long_name = "Coefficients to reconstruct velocity vectors at cell centers" ;
        double cf1 ;
                cf1:units = "unitless" ;
                cf1:long_name = "Surface interpolation weight for level k=1 value" ;
        double cf2 ;
                cf2:units = "unitless" ;
                cf2:long_name = "Surface interpolation weight for level k=2 value" ;
        double cf3 ;
                cf3:units = "unitless" ;
                cf3:long_name = "Surface interpolation weight for level k=3 value" ;
        double hx(nCells, nVertLevelsP1) ;
                hx:units = "m" ;
                hx:long_name = "terrain influence in vertical coordinate, $h_s(x,y,\\zeta)$ in Klemp (MWR 2011)" ;
        double zgrid(nCells, nVertLevelsP1) ;
                zgrid:units = "m MSL" ;
                zgrid:long_name = "Geometric height of layer interfaces" ;
        double rdzw(nVertLevels) ;
                rdzw:units = "unitless" ;
                rdzw:long_name = "Reciprocal dzw" ;
        double dzu(nVertLevels) ;
                dzu:units = "unitless" ;
                dzu:long_name = "d(zeta) at w levels" ;
        double rdzu(nVertLevels) ;
                rdzu:units = "unitless" ;
                rdzu:long_name = "Reciprocal dzu" ;
        double fzm(nVertLevels) ;
                fzm:units = "unitless" ;
                fzm:long_name = "Weight for linear interpolation to w(k) point for u(k) level variable" ;
        double fzp(nVertLevels) ;
                fzp:units = "unitless" ;
                fzp:long_name = "Weight for linear interpolation to w(k) point for u(k-1) level variable" ;
        double zxu(nEdges, nVertLevels) ;
                zxu:units = "unitless" ;
                zxu:long_name = "dz/dx on horizontal coordinate surfaces at u levels" ;
        double zz(nCells, nVertLevels) ;
                zz:units = "unitless" ;
                zz:long_name = "d(zeta)/dz, vertical metric term" ;
        double zb(nEdges, TWO, nVertLevelsP1) ;
                zb:units = "unitless" ;
                zb:long_name = "Coefficients for contribution from u to omega diagnosis, edge-oriented" ;
        double zb3(nEdges, TWO, nVertLevelsP1) ;
                zb3:units = "unitless" ;
                zb3:long_name = "Coefficients for 3rd-order correction to contribution from u to omega diagnosis, edge-oriented" ;
        double dss(nCells, nVertLevels) ;
                dss:units = "unitless" ;
                dss:long_name = "w-damping coefficient" ;
        double u_init(nVertLevels) ;
                u_init:units = "m s^{-1}" ;
                u_init:long_name = "u reference profile" ;
        double v_init(nVertLevels) ;
                v_init:units = "m s^{-1}" ;
                v_init:long_name = "v reference profile" ;
        double t_init(nCells, nVertLevels) ;
                t_init:units = "K" ;
                t_init:long_name = "theta reference profile" ;
        double qv_init(nVertLevels) ;
                qv_init:units = "kg kg^{-1}" ;
                qv_init:long_name = "qv reference profile" ;
        double u(Time, nEdges, nVertLevels) ;
                u:units = "m s^{-1}" ;
                u:long_name = "Horizontal normal velocity at edges" ;
        double w(Time, nCells, nVertLevelsP1) ;
                w:units = "m s^{-1}" ;
                w:long_name = "Vertical velocity at vertical cell faces" ;
        double dz(Time, nCells, nSoilLevels) ;
                dz:units = "m" ;
                dz:long_name = "depth of soil layer bottom" ;
        double dzs(Time, nCells, nSoilLevels) ;
                dzs:units = "m" ;
                dzs:long_name = "soil layer thickness" ;
        double zs(Time, nCells, nSoilLevels) ;
                zs:units = "m" ;
                zs:long_name = "depth of centers of soil layers" ;
        double sh2o(Time, nCells, nSoilLevels) ;
                sh2o:units = "m3 m^{-3}" ;
                sh2o:long_name = "soil equivalent liquid water" ;
        double smois(Time, nCells, nSoilLevels) ;
                smois:units = "m3 m^{-3}" ;
                smois:long_name = "soil moisture" ;
        double tslb(Time, nCells, nSoilLevels) ;
                tslb:units = "K" ;
                tslb:long_name = "soil layer temperature" ;
        double tmn(Time, nCells) ;
                tmn:units = "K" ;
                tmn:long_name = "deep soil temperature" ;
        double skintemp(Time, nCells) ;
                skintemp:units = "K" ;
                skintemp:long_name = "ground or water surface temperature" ;
        double sst(Time, nCells) ;
                sst:units = "K" ;
                sst:long_name = "sea-surface temperature" ;
        double snow(Time, nCells) ;
                snow:units = "kg m^{-2}" ;
                snow:long_name = "snow water equivalent" ;
        double snowc(Time, nCells) ;
                snowc:units = "unitless" ;
                snowc:long_name = "flag for snow on ground (=0 no snow; =1,otherwise" ;
        double snowh(Time, nCells) ;
                snowh:units = "m" ;
                snowh:long_name = "physical snow depth" ;
        double xice(Time, nCells) ;
                xice:units = "unitless" ;
                xice:long_name = "fractional area coverage of sea-ice" ;
        double seaice(Time, nCells) ;
                seaice:units = "unitless" ;
                seaice:long_name = "sea-ice flag (0=no seaice; =1 otherwise)" ;
        double vegfra(Time, nCells) ;
                vegfra:units = "unitless" ;
                vegfra:long_name = "vegetation fraction" ;
        double sfc_albbck(Time, nCells) ;
                sfc_albbck:units = "unitless" ;
                sfc_albbck:long_name = "background surface albedo" ;
        double xland(Time, nCells) ;
                xland:units = "unitless" ;
                xland:long_name = "land-ocean mask (1=land including sea-ice ; 2=ocean)" ;
        double rho(Time, nCells, nVertLevels) ;
                rho:units = "kg m^{-3}" ;
                rho:long_name = "Dry air density" ;
        double theta(Time, nCells, nVertLevels) ;
                theta:units = "K" ;
                theta:long_name = "Potential temperature" ;
        double relhum(Time, nCells, nVertLevels) ;
                relhum:units = "percent" ;
                relhum:long_name = "Relative humidity" ;
        double rho_base(Time, nCells, nVertLevels) ;
                rho_base:units = "kg m^{-3}" ;
                rho_base:long_name = "Base state dry air density" ;
        double theta_base(Time, nCells, nVertLevels) ;
                theta_base:units = "K" ;
                theta_base:long_name = "Base state potential temperature" ;
        double surface_pressure(Time, nCells) ;
                surface_pressure:units = "Pa" ;
                surface_pressure:long_name = "Diagnosed surface pressure" ;
        double precipw(Time, nCells) ;
                precipw:units = "kg m^{-2}" ;
                precipw:long_name = "precipitable water" ;
        double h_oml_initial(Time, nCells) ;
                h_oml_initial:units = "m" ;
                h_oml_initial:long_name = "Initial depth of ocean mix layer" ;
        double u10(Time, nCells) ;
                u10:units = "m s^{-1}" ;
                u10:long_name = "10-meter zonal wind" ;
        double v10(Time, nCells) ;
                v10:units = "m s^{-1}" ;
                v10:long_name = "10-meter meridional wind" ;
        double q2(Time, nCells) ;
                q2:units = "kg kg^{-1}" ;
                q2:long_name = "2-meter specific humidity" ;
        double rh2(Time, nCells) ;
                rh2:units = "percent" ;
                rh2:long_name = "2-meter relative humidity" ;
        double t2m(Time, nCells) ;
                t2m:units = "K" ;
                t2m:long_name = "2-meter temperature" ;

// global attributes:
                :model_name = "mpas" ;
                :core_name = "init_atmosphere" ;
                :source = "MPAS" ;
                :Conventions = "MPAS" ;
                :git_version = "v7.2-11-gaaada8cf4" ;
                :on_a_sphere = "YES" ;
                :sphere_radius = 6371229. ;
                :is_periodic = "NO" ;
                :x_period = 0. ;
                :y_period = 0. ;
                :history = "mpirun -n 1 ./init_atmosphere_model" ;
                :parent_id = "" ;
                :mesh_spec = "0.0" ;
                :config_init_case = 1 ;
                :config_calendar_type = "gregorian" ;
                :config_start_time = "2010-10-23_00:00:00" ;
                :config_stop_time = "2010-10-23_00:00:00" ;
                :config_theta_adv_order = 3 ;
                :config_coef_3rd_order = 0.25 ;
                :config_num_halos = 2 ;
                :config_hcm_staggering = "NO" ;
                :config_nvertlevels = 20 ;
                :config_nsoillevels = 4 ;
                :config_nfglevels = 38 ;
                :config_nfgsoillevels = 4 ;
                :config_months = 12 ;
                :config_geog_data_path = "/glade/work/wrfhelp/WPS_GEOG/" ;
                :config_met_prefix = "CFSR" ;
                :config_sfc_prefix = "SST" ;
                :config_fg_interval = 86400 ;
                :config_landuse_data = "MODIFIED_IGBP_MODIS_NOAH" ;
                :config_topo_data = "GMTED2010" ;
                :config_vegfrac_data = "MODIS" ;
                :config_albedo_data = "MODIS" ;
                :config_maxsnowalbedo_data = "MODIS" ;
                :config_supersample_factor = 3 ;
                :config_use_spechumd = "NO" ;
                :config_ztop = 30000. ;
                :config_nsmterrain = 1 ;
                :config_smooth_surfaces = "YES" ;
                :config_dzmin = 0.3 ;
                :config_nsm = 30 ;
                :config_tc_vertical_grid = "YES" ;
                :config_specified_zeta_levels = "" ;
                :config_blend_bdy_terrain = "NO" ;
                :config_extrap_airtemp = "linear" ;
                :config_static_interp = "YES" ;
                :config_native_gwd_static = "YES" ;
                :config_gwd_cell_scaling = 1. ;
                :config_vertical_grid = "YES" ;
                :config_met_interp = "YES" ;
                :config_input_sst = "NO" ;
                :config_frac_seaice = "YES" ;
                :config_pio_num_iotasks = 0 ;
                :config_pio_stride = 1 ;
                :config_block_decomp_file_prefix = "/media/pedrosp/Data/Simulations/MPAS-PXT/grids/grids/x1.2562/x1.2562.graph.info.part." ;
                :config_number_of_blocks = 0 ;
                :config_explicit_proc_decomp = "NO" ;
                :config_proc_decomp_file_prefix = "graph.info.part." ;
                :file_id = "7dafpqzqjf" ;
