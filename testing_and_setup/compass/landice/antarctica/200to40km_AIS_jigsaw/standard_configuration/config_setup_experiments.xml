<?xml version="1.0"?>
<config case="200km_varres_jigsaw">

        <!-- Set up needed files and executables -->
        <add_executable source="mesh_converter" dest="MpasMeshConverter.x"/>
        <add_executable source="cell_culler" dest="MpasCellCuller.x"/>
        <add_executable source="jigsaw_converter" dest="triangle_jigsaw_to_netcdf.py"/>
        <add_executable source="grid_to_li_grid" dest="create_landice_grid_from_generic_MPAS_grid.py"/>
        <add_executable source="metis" dest="metis"/>
        <add_executable source="interpolate_to_mpasli_grid" dest="interpolate_to_mpasli_grid.py"/>
        <add_executable source="define_cull_mask" dest="define_cullMask.py"/>
        <add_executable source="set_lat_lon_fields_in_planar_grid" dest="set_lat_lon_fields_in_planar_grid.py"/>
        <!--        <add_link source_path="script_configuration_dir" source="albany_input.xml" dest="."/> -->
        <add_link source_path="script_test_dir" source="antarctica_8km_2018_04_20.nc" dest="ais_input_data.nc"/>
        <add_link source_path="script_test_dir" source="ais_temp_pattyn_cism_format.5km.filled.nc" dest="ais_temperature_input_data.nc"/>
        <add_link source_path="script_test_dir" source="ais200to40km-MESH.msh" dest="."/>

<!--
        <namelist name="namelist.landice" mode="forward">
                <template file="thwaites_template.xml" path_base="script_configuration_dir"/>
        </namelist>

        <streams name="streams.landice" keep="immutable" mode="forward">
                <template file="thwaites_template.xml" path_base="script_configuration_dir"/>
                <stream name="input">
                   <attribute name="filename_template">thwaites_1-8km_resolution.nc</attribute>
                </stream>
        </streams>
-->

        <run_script name="setup_test.py">

                <!-- convert from jigsaw to basic netcdf format-->
                <step executable="./triangle_jigsaw_to_netcdf.py"  pre_message="\n\n### Converting from JIGSAW \n\n" post_message="\n\n### Converting from JIGSAW complete\n\n">
                        <argument flag="-m">ais200to40km-MESH.msh</argument>
                        <argument flag="-o">ais200to40km_jigsaw_netcdf.nc</argument>
                </step>

                <!-- convert basic netcdf format to MPAS format -->
                <step executable="./MpasMeshConverter.x"  pre_message="\n\n### Converting to MPAS format\n\n" post_message="\n\n### Converting to MPAS format complete\n\n">
                        <argument flag="">ais200to40km_jigsaw_netcdf.nc</argument>
                        <argument flag="">mpas.nc</argument>
                </step>

                <!-- Add lat/lon  -->
                <step executable="./set_lat_lon_fields_in_planar_grid.py" pre_message="\n\n### Setting lat/lon\n\n" post_message="\n\n### Setting lat/lon complete\n\n">
                        <argument flag="-f">mpas.nc</argument>
                        <argument flag="-p">ais-bedmap2</argument>
                </step>

                <!-- Convert from basic MPAS mesh to MPASLI mesh -->
                <step executable="./create_landice_grid_from_generic_MPAS_grid.py" pre_message="\n\n### Creating LI mesh\n\n" post_message="\n\n### LI mesh creation complete\n\n">
                        <argument flag="-i">mpas.nc</argument>
                        <argument flag="-o">li_full.nc</argument>
                        <argument flag="-l">1</argument>
                </step>

                <!-- Add thickness to landice mesh -->
                <step executable="./interpolate_to_mpasli_grid.py" pre_message="\n\n### Setting up initial condition\n\n" post_message="\n\n### Initial condition setup complete\n\n">
                        <argument flag="-s">ais_input_data.nc</argument>
                        <argument flag="-d">li_full.nc</argument>
                        <argument flag="-m">b</argument>
                        <argument flag="--thickness-only"></argument>
                </step>

                <!-- define cull mask -->
                <step executable="./define_cullMask.py" >
                        <argument flag="-f">li_full.nc</argument>
                        <argument flag="-m">numCells</argument>
                </step>

                <!-- cull cells -->
                <step executable="./MpasCellCuller.x" >
                        <argument flag="">li_full.nc</argument>
                        <argument flag="">culled_grid.nc</argument>
                </step>

                <!-- run through mesh converter again to get quality stats, etc.  -->
                <step executable="./MpasMeshConverter.x" >
                        <argument flag="">culled_grid.nc</argument>
                        <argument flag="">culled_grid_converted.nc</argument>
                </step>

                <!-- Convert from basic MPAS mesh to MPASLI mesh -->
                <step executable="./create_landice_grid_from_generic_MPAS_grid.py" pre_message="\n\n### Creating LI mesh\n\n" post_message="\n\n### LI mesh creation complete\n\n">
                        <argument flag="-i">culled_grid_converted.nc</argument>
                        <argument flag="-o">ais_200_to_40_km.nc</argument>
                        <argument flag="-l">10</argument>
                        <argument flag="-v">glimmer</argument>
                        <argument flag="--beta"></argument>
                        <argument flag="--thermal"></argument>
                        <argument flag="--obs"></argument>
                </step>

                <!-- Set up initial condition on to landice mesh -->
                <step executable="./interpolate_to_mpasli_grid.py" pre_message="\n\n### Setting up initial condition\n\n" post_message="\n\n### Initial condition setup complete\n\n">
                        <argument flag="-s">ais_input_data.nc</argument>
                        <argument flag="-d">ais_200_to_40_km.nc</argument>
                        <argument flag="-m">b</argument>
                </step>

                <!-- Set up temperature initial condition on to landice mesh -->
                <step executable="./interpolate_to_mpasli_grid.py" pre_message="\n\n### Setting up initial condition\n\n" post_message="\n\n### Initial condition setup complete\n\n">
                        <argument flag="-s">ais_temperature_input_data.nc</argument>
                        <argument flag="-d">ais_200_to_40_km.nc</argument>
                        <argument flag="-m">b</argument>
                </step>



                <!-- Set up a graph file
                <step executable="./metis" pre_message="\n\n### Creating graph.info.part file\n\n" post_message="\n\n### graph.info.part file creation complete\n\n">
                        <argument flag="graph.info">16</argument>
                </step> -->

        </run_script>

</config>
