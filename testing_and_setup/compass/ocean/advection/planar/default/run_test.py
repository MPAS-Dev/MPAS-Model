import sys
import os
import shutil
import glob
import subprocess
import argparse


# This script was generated by setup_testcases.py as part of a driver_script
# file.
os.environ['PYTHONUNBUFFERED'] = '1'
parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("--no_init_step", dest="no_init_step",
                    help="If set, init_step case will not be run during "
                         "execution of this script.",
                    action="store_true")
parser.add_argument("--finalize_init_step", dest="finalize_init_step",
                    help="If set, init_step case will have symlinks replaced "
                         "with the files they point to, this occurs after any "
                         "case runs that have been requested.",
                    action="store_true")
parser.add_argument("--no_forward", dest="no_forward",
                    help="If set, forward case will not be run during "
                         "execution of this script.",
                    action="store_true")
parser.add_argument("--finalize_forward", dest="finalize_forward",
                    help="If set, forward case will have symlinks replaced "
                         "with the files they point to, this occurs after any "
                         "case runs that have been requested.",
                    action="store_true")

args = parser.parse_args()
base_path = os.getcwd()
dev_null = open('/dev/null', 'w')
error = False

if not args.no_init_step:
    os.chdir(base_path)
    os.chdir('init_step')

    # Run command is:
    # ./run.py
    subprocess.check_call(['./run.py'])
if not args.no_forward:
    os.chdir(base_path)
    os.chdir('forward')

    # Run command is:
    # ./run.py
    subprocess.check_call(['./run.py'])
if error:
    sys.exit(1)
if args.finalize_init_step:
    old_dir = os.getcwd()
    os.chdir("init_step")
    file_list = glob.glob("*")
    for file in file_list:
        if os.path.islink(file):
            link_path = os.readlink(file)
            os.unlink(file)
            shutil.copyfile(link_path, file)
    os.chdir(old_dir)

if args.finalize_forward:
    old_dir = os.getcwd()
    os.chdir("forward")
    file_list = glob.glob("*")
    for file in file_list:
        if os.path.islink(file):
            link_path = os.readlink(file)
            os.unlink(file)
            shutil.copyfile(link_path, file)
    os.chdir(old_dir)

sys.exit(0)
